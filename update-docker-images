#!/usr/bin/env ruby

if File.basename($PROGRAM_NAME) != 'rake'
  require 'shellwords'
  puts "rake -f #{Shellwords.escape($PROGRAM_NAME)} #{Shellwords.shelljoin(ARGV)}"
  exec "rake -f #{Shellwords.escape($PROGRAM_NAME)} #{Shellwords.shelljoin(ARGV)}"
end

require 'rubygems'

def verify_version(version, task)
  unless version
    puts "Please specify a version for building the docker image"
    puts "e.g. \n GO_VERSION=16.x.x-xxxx rake #{task}"
    puts "or"
    puts "If you want to push the built image to a repository"
    puts "e.g. \n GO_VERSION=16.x.x-xxxx REPOSITORY=repository_name rake #{task}"
    exit(1)
  end
end

def image_name(repository, type)
  return repository ? "#{repository}/#{type}" : type 
end

def docker_build (repository, task, version)
  verify_version(version, task)
  type = "gocd-#{task}-deprecated"
  image = image_name(repository, type)

  verbose false do
    cd "phusion/#{task}" do
      sh("docker build --build-arg GO_VERSION='#{version}' -t #{image} .")

      if repository
        short_version = version.split("-").first
        sh("docker push #{image}")
        sh("docker tag #{image} #{image}:#{short_version}")
        sh("docker push #{image}:#{short_version}")
      end
    end
  end
end

desc "Build and push a specific version of GoCD agent docker image"
task :agent do |t, args|
  docker_build(ENV['REPOSITORY'], t, ENV['GO_VERSION'])
end

desc "Build and push a specific version of GoCD server docker image"
task :server do |t, args|
  docker_build(ENV['REPOSITORY'], t, ENV['GO_VERSION'])
end

task :default =>  [:agent, :server]
